# https://docs.github.com/en/actions

name: "CI"

on:
  pull_request: null
  push:
    branches:
      - "master"

env:
  PHP_EXTENSIONS: "dom filter gmp json libxml mbstring pcre phar reflection simplexml spl tokenizer xml xmlwriter"

jobs:
  coding-standards:
    name: "Coding Standards"
    runs-on: "ubuntu-latest"

    strategy:
      matrix:
        php-version:
          - "8.2"

        dependencies:
          - "locked"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2.3.4"

      - name: "Install PHP with extensions"
        uses: "shivammathur/setup-php@2.9.0"
        with:
          coverage: "none"
          extensions: "${{ env.PHP_EXTENSIONS }}"
          php-version: "${{ matrix.php-version }}"

      - name: "Validate composer.json and composer.lock"
        run: "composer validate"

      - name: "Determine composer cache directory"
        uses: "./.github/actions/composer/composer/determine-cache-directory"

      - name: "Cache dependencies installed with composer"
        uses: "actions/cache@v2.1.3"
        with:
          path: "${{ env.COMPOSER_CACHE_DIR }}"
          key: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('composer.lock') }}"
          restore-keys: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-"

      - name: "Install ${{ matrix.dependencies }} dependencies with composer"
        uses: "./.github/actions/composer/composer/install"
        with:
          dependencies: "${{ matrix.dependencies }}"

      - name: "Create cache directory for squizlabs/php_codesniffer"
        run: "mkdir -p .build/php_codesniffer"

      - name: "Cache cache directory for squizlabs/php_codesniffer"
        uses: "actions/cache@v2.1.3"
        with:
          path: ".build/php_codesniffer"
          key: "php-${{ matrix.php-version }}-php_codesniffer-${{ github.sha }}"
          restore-keys: "php-${{ matrix.php-version }}-php_codesniffer-"

      - name: "Run squizlabs/php_codesniffer"
        run: "vendor/bin/phpcs"

  static-code-analysis:
    name: "Static Code Analysis"

    runs-on: "ubuntu-latest"

    strategy:
      matrix:
        php-version:
          - "8.2"

        dependencies:
          - "locked"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2.3.4"

      - name: "Install PHP with extensions"
        uses: "shivammathur/setup-php@2.9.0"
        with:
          coverage: "none"
          extensions: "${{ env.PHP_EXTENSIONS }}"
          php-version: "${{ matrix.php-version }}"

      - name: "Determine composer cache directory"
        uses: "./.github/actions/composer/composer/determine-cache-directory"

      - name: "Cache dependencies installed with composer"
        uses: "actions/cache@v2.1.3"
        with:
          path: "${{ env.COMPOSER_CACHE_DIR }}"
          key: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('composer.lock') }}"
          restore-keys: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-"

      - name: "Install ${{ matrix.dependencies }} dependencies with composer"
        uses: "./.github/actions/composer/composer/install"
        with:
          dependencies: "${{ matrix.dependencies }}"

      - name: "Create cache directory for vimeo/psalm"
        run: "mkdir -p .build/psalm"

      - name: "Cache cache directory for vimeo/psalm"
        uses: "actions/cache@v2.1.3"
        with:
          path: ".build/psalm"
          key: "php-${{ matrix.php-version }}-psalm-${{ github.sha }}"
          restore-keys: "php-${{ matrix.php-version }}-psalm-"

      - name: "Run vimeo/psalm"
        run: "vendor/bin/psalm --config=psalm.xml --diff --show-info=false --stats --threads=4"

  tests:
    name: "Tests"

    runs-on: "ubuntu-latest"

    env:
      COLLECT_COVERAGE_VERSION: "8.0"

    strategy:
      matrix:
        php-version:
          - "8.0"
          - "8.1"
          - "8.2"

        dependencies:
          - "lowest"
          - "locked"
          - "highest"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2.3.4"

      - name: "Install PHP with extensions"
        uses: "shivammathur/setup-php@2.9.0"
        if: "!(matrix.php-version == env.COLLECT_COVERAGE_VERSION && matrix.dependencies == 'locked')"
        with:
          coverage: "none"
          extensions: "${{ env.PHP_EXTENSIONS }}"
          php-version: "${{ matrix.php-version }}"

      - name: "Install PHP with extensions and coverage"
        uses: "shivammathur/setup-php@2.9.0"
        if: "matrix.php-version == env.COLLECT_COVERAGE_VERSION && matrix.dependencies == 'locked'"
        with:
          coverage: "xdebug"
          extensions: "${{ env.PHP_EXTENSIONS }}"
          php-version: "${{ matrix.php-version }}"

      - name: "Set up problem matchers for phpunit/phpunit"
        run: "echo \"::add-matcher::${{ runner.tool_cache }}/phpunit.json\""

      - name: "Determine composer cache directory"
        uses: "./.github/actions/composer/composer/determine-cache-directory"

      - name: "Cache dependencies installed with composer"
        uses: "actions/cache@v2.1.3"
        with:
          path: "${{ env.COMPOSER_CACHE_DIR }}"
          key: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('composer.lock') }}"
          restore-keys: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-"

      - name: "Install ${{ matrix.dependencies }} dependencies with composer"
        uses: "./.github/actions/composer/composer/install"
        with:
          dependencies: "${{ matrix.dependencies }}"

      - name: "PHPUnit"
        if: "!(matrix.php-version == env.COLLECT_COVERAGE_VERSION && matrix.dependencies == 'locked')"
        run: "vendor/bin/phpunit --configuration=phpunit.xml.dist"

      - name: "PHPUnit with code coverage"
        if: "matrix.php-version == env.COLLECT_COVERAGE_VERSION && matrix.dependencies == 'locked'"
        run: "vendor/bin/phpunit --configuration=phpunit.xml.dist --coverage-clover=.build/phpunit/logs/clover.xml"

      - name: "Send code coverage report to codeclimate.com"
        if: "matrix.php-version == env.COLLECT_COVERAGE_VERSION && matrix.dependencies == 'locked'"
        env:
          CC_TEST_REPORTER_ID: "${{ secrets.CC_TEST_REPORTER_ID }}"
        uses: "paambaati/codeclimate-action@v2.7.5"
        with:
          coverageLocations: "${{ github.workspace }}/.build/phpunit/logs/clover.xml"

  mutation-tests:
    name: "Mutation Tests"

    runs-on: "ubuntu-latest"

    strategy:
      matrix:
        php-version:
          - "8.2"

        dependencies:
          - "locked"

    steps:
      - name: "Checkout"
        uses: "actions/checkout@v2.3.4"

      - name: "Install PHP with extensions"
        uses: "shivammathur/setup-php@2.9.0"
        with:
          coverage: "xdebug"
          extensions: "${{ env.PHP_EXTENSIONS }}"
          php-version: "${{ matrix.php-version }}"
          tools: "infection"

      - name: "Determine composer cache directory"
        uses: "./.github/actions/composer/composer/determine-cache-directory"

      - name: "Cache dependencies installed with composer"
        uses: "actions/cache@v2.1.3"
        with:
          path: "${{ env.COMPOSER_CACHE_DIR }}"
          key: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-${{ hashFiles('composer.lock') }}"
          restore-keys: "php-${{ matrix.php-version }}-composer-${{ matrix.dependencies }}-"

      - name: "Install ${{ matrix.dependencies }} dependencies with composer"
        uses: "./.github/actions/composer/composer/install"
        with:
          dependencies: "${{ matrix.dependencies }}"

      - name: "Run mutation tests with Xdebug and infection/infection"
        run: "infection --configuration=infection.json.dist"
        env:
          STRYKER_DASHBOARD_API_KEY: "${{ secrets.STRYKER_DASHBOARD_API_KEY }}"
